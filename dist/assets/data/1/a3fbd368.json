{"data":{"post":{"id":"1a628b1ee8cc6fd6897a1603ef3b661c","title":"Recursion, how?","content":"<p>I don't know it all, I might be wrong, If I'm wrong, please correct me.</p>\n<h2 id=\"exploring-recursion\"><a href=\"#exploring-recursion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Exploring Recursion</h2>\n<p>A simple binary tree displayed below, and I'll be trying to explain recursion with it.</p>\n<p>Say the code for our tree node is:</p>\n<div class=\"gridsome-code-title\"><span>TreeNode.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right</code></pre></div>\n<p>So for the awkwardly drawn tree ( I no sabi draw like that ), we have 7 nodes in total: A root node, 3, child, 2 and 6, and their offspring, 4, 1, 7, 9 ( You sha get?).</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597157597/w3picgjq7c7td9yfeuos.png\" alt=\"Binary Search Tree\"></p>\n<p>An inorder traversal is carried out easily using recursion...</p>\n<p>The code for that is:</p>\n<div class=\"gridsome-code-title\"><span>InorderTraversal.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span> <span class=\"token comment\"># If there's no root, return an empty array.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>inOrderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>inOrderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Wait, what? Just how many lines of code? That's recursion for you.. </p>\n<p>However, you can also\ntraverse this tree iteratively. But, who likes stress? Not me sha.</p>\n<p>So what this code does is it traverse every parent node from left to root to right i.e, our result is => <code class=\"language-text\">[4,2,1,3,7,6,9]</code></p>\n<p>Think of it like this because to be honest, I think this is how it works:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- We have a stack, [],then we append only the value of root node passed into it.\nThat's all.</code></pre></div>\n<h2 id=\"what\"><a href=\"#what\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What?</h2>\n<p>Yes, the recursive call splits the tree into left and right. Remember that every object of the tree is a node, and a node has left and right nodes as its leaves. So, when the recursive call kicks in on a node, it adds that nodes' value to the stack...</p>\n<p>A nodes' left value is prepended to the value of the node, and the right appended to it. This continues till there are no nodes left, only then, will the stack from the left be prepended to the ancestor node value, and the stack from the right appended to the ancestor node.</p>\n<h3 id=\"but-we-should-have--\"><a href=\"#but-we-should-have--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>But, we should have [[], []]</h3>\n<p>Haha, nope. The values are added to the main stack as they leave the recursion stack frame in the LIFO manner.</p>\n<p>Here's a diagrammatic representation which is also my first time using Excalidraw..</p>\n<p> <img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597158241/vgsvvtlcnasjkn0aonvj.png\" alt=\"Recursion Tree\"></p>\n<h2 id=\"teinz\"><a href=\"#teinz\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Teinz</h2>\n<p>I'd like to get feedback and correction on this. Tbh, explaining this in words is hard I won't lie, in person is the best where I can put gra gra lmao...</p>\n<p>Wait, I'm talking to my sef. Haha! </p>\n","date":"11 June 2020","timeToRead":2,"image":null}},"context":{}}