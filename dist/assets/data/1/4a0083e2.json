{"data":{"post":{"id":"ce75ddb6920a4b91656bc67503ebf21d","title":"Linked Lists 101 - Basic Introductions, Nodes","content":"<p>Linked list was the first data structure that gave me tough time. I wanted to understand deeply the concept of storing next node pointers - memories, linking etc. I had so much help from Twitter and the course material I was using. I now have a very good understanding of linked lists, this doesn't mean I can answer every linked list question perfectly however, I have solved at least 80-90% of the linked list question on LeetCode.</p>\n<h2 id=\"what-is-a-linked-list\"><a href=\"#what-is-a-linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is a Linked List?</h2>\n<p>Of course, lists that are linked together. The first time I heard of this, I thought linked lists were contiguous arrays like <code class=\"language-text\">[1,2,3,4][5,6,7]</code>. Haha! I wasn't far from the meaning, just that it wasn't as I thought.</p>\n<p>A linked list is a continuous list of nodes where a node is a block structure housing the node value and a pointer (or memory) address to the next node. Each node from the head node has a next pointer that keeps the address of the next till it gets to the last node that points to nothing. </p>\n<p>The connection from node to node differentiates it from the normal list or array. Arrays don't keep track of their next values or other values unlike the linked lists.</p>\n<p>Here is a representation of a linked list:</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597157838/b4sctsjpwhk2dtkm5xsk.png\" alt=\"Linked List Representation\"></p>\n<blockquote>\n<p>In summary, a linked list is a collection of nodes pointing to each other in no manner, actually.</p>\n</blockquote>\n<h2 id=\"types-of-linked-lists\"><a href=\"#types-of-linked-lists\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Types of Linked Lists</h2>\n<p>There are currently three types of linked list:</p>\n<ol>\n<li>Singly linked list</li>\n<li>Doubly linked list</li>\n<li>Circular linked list</li>\n</ol>\n<p>The above are the basic three types, other sub derivations can be made e.g circular doubly linked list. The image above is an example of a singly linked list.</p>\n<h3 id=\"singly-linked-list\"><a href=\"#singly-linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Singly linked list</h3>\n<p>A singly linked list is defined by its node. A singly linked list node has a value and the next pointer, the linked list diagram below is an example of a singly linked list.</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597157838/b4sctsjpwhk2dtkm5xsk.png\" alt=\"Linked List Representation\"></p>\n<p>A singly linked list node implementation is like this:</p>\n<div class=\"gridsome-code-title\"><span>Node.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  </code></pre></div>\n<p>In JavaScript:</p>\n<div class=\"gridsome-code-title\"><span>Node.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A linked list can be easily defined as:</p>\n<div class=\"gridsome-code-title\"><span>In Python</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">llist <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nllist<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-code-title\"><span>In JavaScript</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> llist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nllist<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The stress of instantiating a new node class everytime pushses us to write a class for the Linked List itself. It isn't necessary but advised, I'll talk on the linked list class itself in subsequent articles.</p>\n<h3 id=\"2-doubly-linked-list\"><a href=\"#2-doubly-linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Doubly Linked List</h3>\n<p>In simple words, this linked list node is linked at both end. A doubly linked list node points to the previous node and the next node.</p>\n<p>Here is a graphical representation:</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597158164/klpnmjakwc5q1snsv5v2.png\" alt=\"Doubly linked list\"></p>\n<p>The implementation of a doubly linked list node is:</p>\n<div class=\"gridsome-code-title\"><span>Node.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>previous <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<div class=\"gridsome-code-title\"><span>Node.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>previous <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's easy just like the singly linked list.</p>\n<h3 id=\"3-circular-linked-list\"><a href=\"#3-circular-linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Circular Linked List</h3>\n<p>The circular linked list node is a singly linked list except that the last node always point to the first node.</p>\n<p>Here's a diagram:</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597158022/xssdyic9p9q8mvgmg6rz.png\" alt=\"Circular linked list\"></p>\n<p>The implementation is the same as the singly linked list except that the linked list class itself ensures that every new node sets its next pointer to the head of the list.</p>\n<p>That's all for circular.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>In this article, I discussed the nodes for the different type of lists. Yes, I didn't create or describe the linked list class itself, that will be treated in the next article.</p>\n<p>A linked list is basically a collection of nodes keeping pointers to their next nodes ( singly ), previous and next ( dobuly ) and a pointer to the end ( circular ).</p>\n<p>If you happen to read this, do comment. I'm always up for corrections and compliments :)</p>\n","date":"9 August 2020","timeToRead":3,"image":null}},"context":{}}