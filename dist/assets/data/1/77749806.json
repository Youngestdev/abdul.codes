{"data":{"post":{"id":"44e5235b2350db14fe3aff6a21ea318d","title":"Miniature Realtime Stream","content":"<p>Building Mercury has been fun. I have learned more about software development and MongoDB in particular. For instance, I had never had to make use of MongoDB aggregations until Mercury, and it has been fascinating.</p>\n<p>This little article is just to talk about MongoDB's <code class=\"language-text\">.watch()</code>. In a few words, what the method does is to <em>watch</em> the changes going on in and around a collection. For example, it can log the streams of insert, update, and delete operations happening to the selected collection.</p>\n<h2 id=\"okay-what-was-i-building\"><a href=\"#okay-what-was-i-building\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Okay, what was I building?</h2>\n<p>So, I wanted to stream the changes going on in the database and communicate it via a websocket channel to the frontend guys. There's an activity tab that should update the user on changes especially as the application is a multi-user-tied-to-one-account application.</p>\n<h2 id=\"so\"><a href=\"#so\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So...</h2>\n<p><strong>You need to enable pre-image and post-image. I enabled it for all my collections from my mongosh console by running: </strong></p>\n<div class=\"gridsome-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">const collections <span class=\"token operator\">=</span> db.getCollectionNames<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.filter<span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">!</span>c.startsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'system.'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\ncollections.forEach<span class=\"token punctuation\">(</span>collectionName <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"collMod\"</span><span class=\"token builtin class-name\">:</span> collectionName,\n    <span class=\"token string\">\"changeStreamPreAndPostImages\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"enabled\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I started by building out the websocket connection manager:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> asyncio\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> WebSocket\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n<span class=\"token keyword\">from</span> mercury<span class=\"token punctuation\">.</span>infra<span class=\"token punctuation\">.</span>logger <span class=\"token keyword\">import</span> logger\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionManager</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> WebSocket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> websocket<span class=\"token punctuation\">:</span> WebSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">[</span>user_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> websocket\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Client </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\"> connected. Active connections: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> user_id <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">[</span>user_id<span class=\"token punctuation\">]</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Client </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\"> disconnected. Active connections: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">send_to_client</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> user_id <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">:</span>\n                websocket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>active_connections<span class=\"token punctuation\">[</span>user_id<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>send_text<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n                logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Message sent to client </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No active connection found for user </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It's pretty straightforward. It handles the connection, keeping track and sending back to the designated users.</p>\n<p>Then, the main action - the websocket route. For changes to be listened to, a connection needs to be established for a user. I'm not going to go deep at all, I'm just going to illustrate it. Pardon me, these days, I have become lazy.</p>\n<p>Let's go however. I started by connecting a valid user aka storing the user's credential for subsequent communication:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> client_id <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> token<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token number\">1008</span><span class=\"token punctuation\">,</span> reason<span class=\"token operator\">=</span><span class=\"token string\">\"Client ID and token required\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">if</span> app<span class=\"token punctuation\">.</span>get_client_type_from_client_id<span class=\"token punctuation\">(</span>client_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> reason<span class=\"token operator\">=</span><span class=\"token string\">\"Invalid client ID\"</span><span class=\"token punctuation\">)</span>\n\nuser <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>authentication_service<span class=\"token punctuation\">.</span>decode_jwt<span class=\"token punctuation\">(</span>\n    token\n<span class=\"token punctuation\">)</span>\n\ndb <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>database<span class=\"token punctuation\">.</span>get_db<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nvalid_user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> valid_user <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> reason<span class=\"token operator\">=</span><span class=\"token string\">\"User does not exist\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>websocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>valid_user<span class=\"token punctuation\">[</span><span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> websocket<span class=\"token punctuation\">)</span></code></pre></div>\n<p>First, I try to ascertain the validity of the client's ID, token and user before proceeding to connect the user, I make use of the ID as it's unique for each of them.</p>\n<h2 id=\"let-the-watch-party-begin\"><a href=\"#let-the-watch-party-begin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Let the watch party begin</h2>\n<p>In a <code class=\"language-text\">try..except</code> block, I start the main party. I need to be up to date with all the operations but I don't need all the information being passed around as well. Therefore, I wrote an aggregation pipeline to return just the fields I'm interested in:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">pipeline <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'$match'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'operationType'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'$in'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"$project\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"operationType\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"documentKey\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocument.creator_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocument.owner._id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocument.owned_by\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocument.quantity_in_stock\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocument.reorder_point\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocumentBeforeChange.owned_by\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fullDocumentBeforeChange.creator_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>In some cases, I need the full document before a change is effected. An example is a delete operation where I need to get the document details to update the stream. I defined them in an options dict:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'full_document'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'updateLookup'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'full_document_before_change'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'required'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then I begin the watch operation and store the operation type <code class=\"language-text\">operation_type</code>, document key (ID) <code class=\"language-text\">document_key</code>, and the collection <code class=\"language-text\">collection</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> db<span class=\"token punctuation\">.</span>watch<span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>options<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> change_stream<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">for</span> change <span class=\"token keyword\">in</span> change_stream<span class=\"token punctuation\">:</span>\n        operation_type <span class=\"token operator\">=</span> change<span class=\"token punctuation\">[</span><span class=\"token string\">'operationType'</span><span class=\"token punctuation\">]</span>\n        document_key <span class=\"token operator\">=</span> change<span class=\"token punctuation\">[</span><span class=\"token string\">'documentKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">]</span>\n        collection <span class=\"token operator\">=</span> change<span class=\"token punctuation\">[</span><span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"coll\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>With all these in place, I defined the specific actions to be carried out (mainly websocket broadcast) for each action. Here's the one for the <code class=\"language-text\">delete</code> operation:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">if</span> operation_type <span class=\"token operator\">==</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">:</span>\n    full_doc <span class=\"token operator\">=</span> change<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'fullDocumentBeforeChange'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">match</span> collection<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"inventory_items\"</span><span class=\"token punctuation\">:</span>\n            business <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>businesses<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"owned_by\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> business<span class=\"token punctuation\">[</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> business <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">:</span>\n            business <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>businesses<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"creator_id\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> business<span class=\"token punctuation\">[</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> business <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">_</span><span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Unhandled collection for delete: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">if</span> recipient<span class=\"token punctuation\">:</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Change detected: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\"> on document </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>document_key<span class=\"token punctuation\">}</span></span><span class=\"token string\"> in collection </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Attempting to send message to recipient: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>recipient<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>websocket<span class=\"token punctuation\">.</span>send_to_client<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>recipient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No recipient found for change: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The action for <code class=\"language-text\">insert</code> and <code class=\"language-text\">update</code> are similar si they're grouped togehter:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">elif</span> operation_type <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    full_doc <span class=\"token operator\">=</span> change<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'fullDocument'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">match</span> collection<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">:</span>\n            business <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>businesses<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"creator_id\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> business<span class=\"token punctuation\">[</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> business <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"inventory_items\"</span><span class=\"token punctuation\">:</span>\n            business <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>businesses<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"owned_by\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> business<span class=\"token punctuation\">[</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">if</span> business <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n\n            <span class=\"token keyword\">if</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"quantity_in_stock\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> full_doc<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"reorder_point\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>websocket<span class=\"token punctuation\">.</span>send_to_client<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>recipient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                                <span class=\"token string\">\"Stock low, please restock the inventory to continue issuing orders.\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">_</span><span class=\"token punctuation\">:</span>\n            logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Unhandled collection for </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            recipient <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">if</span> recipient<span class=\"token punctuation\">:</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Change detected: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\"> on document </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>document_key<span class=\"token punctuation\">}</span></span><span class=\"token string\"> in collection </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Attempting to send message to recipient: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>recipient<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>websocket<span class=\"token punctuation\">.</span>send_to_client<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>recipient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No recipient found for change: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>collection<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Unhandled operation type: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operation_type<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The end:</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">except</span> asyncio<span class=\"token punctuation\">.</span>CancelledError<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Handle cancellation gracefully</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Task was cancelled. Cleaning up...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> WebSocketDisconnect<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>websocket<span class=\"token punctuation\">.</span>disconnect<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>valid_user<span class=\"token punctuation\">[</span><span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"User {valid_user[\"</span></span>_id<span class=\"token string\">\"]} is disconnected\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I connected an active session:</p>\n<div class=\"gridsome-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Client 67a9f47786c624adede7---- connected. Active connections: <span class=\"token punctuation\">[</span><span class=\"token string\">'67a9f47786c624adede7----'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Change detected: delete on document 67aa00fce173bf9d4ba2---- <span class=\"token keyword\">in</span> collection orders</code></pre></div>\n<h2 id=\"if-you-were\"><a href=\"#if-you-were\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If you were...</h2>\n<p>If you were to build a streaming endpoint like this, how would you approach it?</p>\n","date":"23 March 2025","timeToRead":5,"image":null}},"context":{}}