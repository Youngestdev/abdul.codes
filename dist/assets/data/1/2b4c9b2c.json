{"data":{"post":{"id":"7687a1b56481eeaff84c5719a045c610","title":"Generating Prime Numbers in A Range of N Numbers","content":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>Okay, so this method of generating prime numbers might be common knowledge, but I just thought of it and implemented it myself.</p>\n<p>If you know me to an extent, you might have seen me blabbing about <strong>prime numbers</strong>. I think prime numbers are fascinating for a reason I'm not sure about. As poor as I am in the field of Mathematics, numbers are always fun to play with as I have a habit of trying to create common relations between a set of numbers. This is a major reason why I liked Arithmetic and Geometric progressions in secondary school.</p>\n<p>There are a couple of standard and intelligent algorithms on prime numbers. I personally have used the <strong>sieve of eratosthenes</strong>, and it's a brilliant one. I like the intuition behind it and as I write this, I can see how the sieve of eratosthenes is impressive and runs in half the time of my own. Will that stop me? No üëçüèø</p>\n<hr>\n<p>I was in a conversation earlier today with my friend, Yussuf. We were talking about prime numbers, and I mentioned how the next prime should be able to be gotten from the previous ones. That didn't work and instead, we noticed a pattern - I bet everyone notices it's a series.</p>\n<p>The series <em>1,3,5,7</em> had a common difference of 2 until <em>11</em>. As a result, it wasn't a straightforward one as one would think. But hey, 2 is the common factor and negates only when the said number is <strong>even</strong> or a multiple of <strong>3,5 and 7</strong>.</p>\n<h2 id=\"what-is-a-prime-number\"><a href=\"#what-is-a-prime-number\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is a prime number?</h2>\n<p>A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers - Wikipedia.</p>\n<p>A prime number is essentially odd ( except 2 which I don't count as a prime sha) and can not be divisible by the common odd <del>prime</del> divisors: <strong>3, 5 and 7</strong>. So, to generate the number of primes in a range of <strong>N</strong> numbers, I have the algorithm:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Find-Primes-In-Range-Of-N(N):\n    Primes = [1,2,3,5,7] // Store the prime numbers here.\n    Primary-Divisors = [3,5,7]\n    \n    If N &lt;= 7:\n        Return Primes // Since we already initialized the primes array for a range of 1..7\n    \n    For I -> N:\n        If IsOdd(I):\n            Truth-Table = []\n            For Div in Primary-Divisors:\n                Remainder = I % Div\n                Truth-Table.add(Remainder)\n            If All elements in Truth-Table > 0: // Means that's a prime number\n                Primes.add(I)\n    Return Primes</code></pre></div>\n<p>Complimentary <code class=\"language-text\">IsOdd</code> function:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">IsOdd(Number):\n    If Number % 2 > 0:\n        Return True</code></pre></div>\n<p>The pseudocode pretty much gives an idea of the algorithm. In my head, I find it basic and anyone could've thought of this and won't be surprised if this is out already. I find it exciting that I thought of this, and it worked, haha.</p>\n<p>In Python, the algorithm implemented is:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_primes_in_a_range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n    primary_divisors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> primes\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> is_odd<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            truth_table <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> div <span class=\"token keyword\">for</span> div <span class=\"token keyword\">in</span> primary_divisors<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> truth_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                primes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> primes</code></pre></div>\n<p>I initiated the primes array to contain the basic odd divisors. Every odd number is divisible by at least one of <strong>3, 5 or 7</strong>.</p>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Summary</h2>\n<p>I will use this in any situation I can. I find this exciting and will tinker on how to make this a bit better. I ran the function for a values of n from 7 to 10000. Here's the graph:</p>\n<p><img src=\"https://tiny-img.com/images/custom-uploads/optimized/graph.png\" alt=\"Matplotlib graph\"></p>\n<p>Here's a Google Colab link: <a href=\"https://colab.research.google.com/drive/1l6XtulgHAO00Zw2VWYAoChdGbajyA5mE?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://colab.research.google.com/drive/1l6XtulgHAO00Zw2VWYAoChdGbajyA5mE?usp=sharing</a></p>\n<hr>\n<p>Yes, what's the complexity of this algorithm space wise and time wise? Tell me.</p>\n","date":"8 December 2021","timeToRead":3,"image":null}},"context":{}}