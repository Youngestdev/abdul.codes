{"data":{"post":{"id":"824e97b775c905d239ed45262a68054d","title":"Linked Lists 101 - The Linked List class","content":"<p>In the previous post, I did an introduction to Linked Lists. The feedbacks and corrections were the motivation to continue, I'm happy you people found it nice, thanks!</p>\n<p>Today, I'll be taking a look at the linked list class, its use and some methods. If you haven't read the introductory post to linked list, <a href=\"linked-lists-101-basic-introductions-nodes\">you should read it first</a>.</p>\n<blockquote>\n<p>Before you proceed, I am more comfortable writing in Python, I'd try my best to translate code to JavaScript and the likes :)</p>\n</blockquote>\n<h2 id=\"the-linked-list-class\"><a href=\"#the-linked-list-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Linked List Class</h2>\n<p>As I discussed in the previous post, a linked list is a continuous list of nodes. The nodes make the linked list, actually. The linked list class serves as a wrapper for adding functionalities and efficiently using the nodes. Take for instance, I want to append a node to the middle of a long chain of nodes, I'd have to perform it manually like this:</p>\n<div class=\"gridsome-code-title\"><span>Node.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">nodes <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Insert a new node after 11.</span>\n\nnew_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\nnew_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node</code></pre></div>\n<p>Stressful, isn't it? Imagine I need to perform this same operation for a couple of nodes, say 10, I have to manually do this every time. This brings forth unnecessary code bulkiness and complexity - space. Having a Linked List class with a method solves this all.</p>\n<p>The Linked List class is an independent class. The initialisation of nodes in the class uses the <code class=\"language-text\">Node</code> class still. Here is a linked list class implementation:</p>\n<p>In Python:</p>\n<div class=\"gridsome-code-title\"><span>LinkedList.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber 0\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">import</span> Node <span class=\"token comment\"># You could as well fix the Node class here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In JavaScript:</p>\n<div class=\"gridsome-code-title\"><span>LinkedList.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// You should export the Node class.</span>\n\n<span class=\"token keyword\">import</span> Node <span class=\"token keyword\">from</span> <span class=\"token string\">'./Node'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"adding-nodes-to-the-linked-list\"><a href=\"#adding-nodes-to-the-linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding Nodes To The Linked List</h3>\n<p>A linked list begins from a head node to the tail node. So, when you initialise a linked list, you start with a head node and to add other nodes, you need to add a method for that. We'll add two methods: </p>\n<ol>\n<li><code class=\"language-text\">append</code> - This adds a new node after a head node or tail node</li>\n<li><code class=\"language-text\">prepend</code> - This adds a new node before the existing nodes in the linked list, making it the new head.</li>\n</ol>\n<p>Let's start with the <code class=\"language-text\">append</code> method:</p>\n<p>In Python</p>\n<div class=\"gridsome-code-title\"><span>LinkedList.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber 0\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n           \n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> none<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n            <span class=\"token keyword\">return</span>\n        \n        head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In JavaScript</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">let</span> new_node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> new_node\n            <span class=\"token keyword\">return</span> head\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next\n        <span class=\"token punctuation\">}</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> new_node\n        <span class=\"token keyword\">return</span> head\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I'll break down the process in the code block in a quick summary:</p>\n<blockquote>\n<p>The first thing the method does is to create a new node and store it in a variable. Next, it checks if there's only one node in the list, if that turns out to be true, append the node to the head then return. However, if the head node isn't the only node in the linked list, traverse the node till we get to the tail and append it there.</p>\n</blockquote>\n<p>Here's a diagramatic explanation:</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597330627/z31vpiv7i3s9p0vyzkkd.png\" alt=\"Append A Node\"></p>\n<p>Let's implement the <code class=\"language-text\">prepend</code> method, this is actually very simple. Just after the <code class=\"language-text\">append</code> method, add the following block of code:</p>\n<p>In Python</p>\n<div class=\"gridsome-code-title\"><span>LinkedList.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber 0\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In JavaScript:</p>\n<div class=\"gridsome-code-title\"><span> LinkedList.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> new_node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n    new_node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n    <span class=\"token keyword\">return</span> current\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The prepend method is self-explanatory. What it does is it appends the head of a linked list to a newly created node and change the head of the linked list to the newly created node.</p>\n<p>Here's a diagramatic explanation of the prepend method:</p>\n<p><img src=\"https://res.cloudinary.com/adeshina/image/upload/v1597330749/sdxskzfmjfdfipgb0pq3.png\" alt=\"Prepend method\"></p>\n<p>The last method I'll be implementing in this blogpost is the <code class=\"language-text\">printList</code> method. This method enables us output ( or print ) all the node values in the linked list as an array. Implement this method after the <code class=\"language-text\">prepend</code> method.</p>\n<p>In Python:</p>\n<div class=\"gridsome-code-title\"><span> LinkedList.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber 0\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        output<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> output</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In JavaScript:</p>\n<div class=\"gridsome-code-title\"><span>LinkedList.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">printList</code> method traverse each node in the linked list and stores the value in the <code class=\"language-text\">result</code> array.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>In this short blogpost, I introduced the linked list class and basic methods - append and prepend. In the next blogpost, I will talk about other methods for reversing a linked list, deleting nodes and swapping nodes.</p>\n","date":"13 August 2020","timeToRead":4,"image":null}},"context":{}}