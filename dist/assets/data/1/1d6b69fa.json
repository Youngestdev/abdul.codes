{"data":{"post":{"id":"5725fa5803fa68f97ff510269bd3d0c2","title":"The Andela challenge, GroupSort","content":"<p>I got wind of the Andela \"Crack the Code\" challenge last Friday. I couldn't complete it due to some annoying issues here at the house, I could only attempt two and forgot to copy other questions to solve at my leisure time. I'll discuss my thought process in solving the first two questions I was able to solve. This is the first question.</p>\n<p><strong>If you have the full questions at hand, please reach out to me via the comment section!</strong></p>\n<blockquote>\n<p>It was a priced challenge, and I actually didn't do it for the gram lmao. Just to measure how far I can solve algos, really.</p>\n</blockquote>\n<p>The first question is very easy, although I don't think my solution was optimal tbh. Here's the problem statement:</p>\n<hr>\n<h2 id=\"groupsort\"><a href=\"#groupsort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GroupSort</h2>\n<p>Given an array of integer, create a 2 dimensional array where the first element is a distinct value from the array and the second element is that value's frequency within the array. Sort the resulting asrray descending by frequency. If multiple values have the same frequency, they should be sorted accordingly.</p>\n<p>Example:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  \n  <span class=\"token comment\"># return  [[1,2], [3,2], [2,1]]</span>\n\n  arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token comment\"># return [[2,3], [1,1]]</span></code></pre></div>\n<p>The question above indicates that it's a count and sort problem - record the frequency, and return individual arrays of the number and its frequency in a parent array sorted in descending order. However, there's another condition: <strong>If multiple values have the same frequency, they should be sorted accordingly.</strong></p>\n<p>The first test case is an example of the above highlighted condition.</p>\n<h2 id=\"solution\"><a href=\"#solution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Solution</h2>\n<p>Naturally, I would store the frequencies in a dictionary ( HashMap ) and return the numbers according to their frequency or reversed, but that won't work for all cases, unfortunately.</p>\n<p>So, what I did instead was store the values in a dictionary alongside their frequency, and return the values from the dictionary sorted using the frequency as the <code class=\"language-text\">key</code>. <code class=\"language-text\">key</code> in this sense means the base condition for sorting.</p>\n<h4 id=\"i-dont-get\"><a href=\"#i-dont-get\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>I don't get...</h4>\n<blockquote>\n<p>Take for example, to return the array <code class=\"language-text\">[3,3,1,1,2]</code> according to frequency, we'll have: <code class=\"language-text\">[(2, 1), (1, 2), (3, 2)]</code>.\nBut, the question states that if there are numbers with the same frequency, return the numbers with the same frequency in ascending fashion which gives us: <code class=\"language-text\">[(1, 2), (3, 2), (2, 1)]]</code></p>\n</blockquote>\n<p>Here's the code:</p>\n<div class=\"gridsome-code-title\"><span>GroupSort.py</span></div><div class=\"gridsome-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber 0\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">groupSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> store<span class=\"token punctuation\">:</span>\n            store<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        store<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"complexity--this-runs-in-on-time-and-space-runs-in-o1--the-sorting-is-onlogn-and-the-for-loop-runs-in-on-time-correct-my-complexity-if-its-wrong\"><a href=\"#complexity--this-runs-in-on-time-and-space-runs-in-o1--the-sorting-is-onlogn-and-the-for-loop-runs-in-on-time-correct-my-complexity-if-its-wrong\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Complexity : This runs in O(n) time and space runs in O(1)? . The sorting is O(nlogn), and the for loop runs in O(n) time. Correct my complexity if it's wrong!</h4>\n<p>In my solution above, I have a hashmap, <code class=\"language-text\">store</code> where I store the numbers and their frequencies respectively using a <code class=\"language-text\">for-loop</code>. Next, I return a list of the elements in the <code class=\"language-text\">store</code> sorted using their frequency. </p>\n<p>This sorting used an anonymous function as the key for sorting. <code class=\"language-text\">key=lambda x: (-1 * x[1], x[0])</code>. If you haven't gotten the trick I used for sorting, haha!</p>\n<p>Here's what I did:</p>\n<p>Like we all know that in negative numbers, -1 is greater than -2, so I set the frequencies to negative values for the time being ( the indexes won't be permanently negative o! ), and return the numbers based on their negative frequencies. Here is how it's done...</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Original array from hashmap = > [(3, 2), (1, 2), (2, 1)]]</span>\n<span class=\"token comment\"># The lambda function returns:</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># when the sorted() function is eventually called in the call stack, we have:</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>So why do we have <code class=\"language-text\">[(1, 2), (3, 2), (2, 1)]</code> ? That's because the whole process is using the negative frequencies to sort it in the call stack and as a result, isn't modifying the values so at the end of the day, the original array is returned, <strong>sorted</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Call stack: [(-2, 1), (-2, 3), (-1, 2)]\n# Main stack (haha!), return the original array based on the indices from the call stack:\n\n[(1, 2), (3, 2), (2, 1)]</code></pre></div>\n<h3 id=\"but-but--2-3--2-1-\"><a href=\"#but-but--2-3--2-1-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>But but.. (-2, 3), (-2, 1) ?</h3>\n<p>Remember two numbers with same frequency should be returned accordingly? That's it.</p>\n<p>[-2, 3] > [-2, 1] so the function returns [-2, 1], [-2, 3]</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h3>\n<p>This is how best I can explain my approach to this question. All test cases passed, I'll like to know the other solutions! Teinz</p>\n","date":"1 July 2020","timeToRead":3,"image":null}},"context":{}}