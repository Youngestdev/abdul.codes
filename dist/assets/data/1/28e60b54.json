{"data":{"post":{"id":"59a389c2b7b23ccc113fb19498be7581","title":"Building An SSO Model in FastAPI Applications","content":"<h2 id=\"current-status\"><a href=\"#current-status\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Current Status</h2>\n<p>This is a rough article. Once I have free time, I will rewrite the entire article to use the proper technologies I used.</p>\n<h2 id=\"preamble\"><a href=\"#preamble\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Preamble</h2>\n<p>I'm currently working on a project. Ideally, the model of user authentication should be the traditional username and password. However, I'm a lazy dev, and I do not want to have to deal with the complexity of that model.</p>\n<p>I have used applications that employ the Single Sign On model, and I find it fascinating. Interestingly, I don't really have an idea of how it worked then. I thought of a simple way, and I think it's sufficient.</p>\n<blockquote>\n<p>That said, I'll be writing a concise article on how I built an SSO model for a FastAPI Application in the future.</p>\n</blockquote>\n<h2 id=\"working-principle\"><a href=\"#working-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Working Principle</h2>\n<p>For this model, a token will be generated by a function, tied to the requested user and then registered in the database.</p>\n<p>The purpose of saving this in the database is to act as a point of validation when the sign-in link is used. That is, whenever a sign-in link is used, the application checks if it is saved in the database before proceeding to give a response.</p>\n<p>I have tried to demonstrate this in the image below:</p>\n<p><img src=\"https://res.cloudinary.com/laisi/image/upload/v1625402923/process_mr8vc4.svg\" alt=\"Excaldiraw diagram of the working principle\"></p>\n<p>I must apologize ahead: In this article, I used an in-memory database. However, the concept is the same as when applied to a real database.</p>\n<h2 id=\"prerequisite\"><a href=\"#prerequisite\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisite</h2>\n<ul>\n<li>FastAPI </li>\n</ul>\n<h2 id=\"scaffold-your-application\"><a href=\"#scaffold-your-application\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scaffold your application</h2>\n<p>The first step is to create an empty directory and scaffold an application:</p>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ mkdir sso-app &amp;&amp; cd sso-app\n$ python3 -m venv</code></pre></div>\n<p>Activate the virtual environment and install the application dependencies:</p>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ . venv/bin/activate\n(venv)$ pip install fastapi uvicorn\n(venv)$ pip freeze &gt; requirements.txt </code></pre></div>\n<p>Create the routing file, and utilities file:</p>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">(venv)$ touch {routes,utilities}.py</code></pre></div>\n<h2 id=\"write-the-routes\"><a href=\"#write-the-routes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Write the routes</h2>\n<p>I'll be having a route to:</p>\n<ul>\n<li>Add a new user</li>\n<li>Request for a sign-in link</li>\n<li>Sign a user in</li>\n</ul>\n<p>In <code class=\"language-text\">routes.py</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\n<span class=\"token keyword\">from</span> utilities <span class=\"token keyword\">import</span> generate_token\n\nusers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nlogin_tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nrouter <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span>\n    title<span class=\"token operator\">=</span><span class=\"token string\">\"SSO Application\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Simple application demo on how SSO works\"</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/new/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">new_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user_id <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    users<span class=\"token punctuation\">[</span>user_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User data successfully added\"</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sso\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_sso_link</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> users<span class=\"token punctuation\">[</span>user_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> generate_token<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n        login_tokens<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> token\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User with supplied ID doesn't exist\"</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sso/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">sign_in</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> token <span class=\"token keyword\">in</span> login_tokens<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User logged in successfully.\"</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Invalid token passed\"</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"write-the-utility-function\"><a href=\"#write-the-utility-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Write the utility function</h2>\n<p>The utility function is named <code class=\"language-text\">generate_token</code>. It is responsible for generating identifiers.</p>\n<p>In <code class=\"language-text\">utilities.py</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">generate_token</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    length_of_token <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    identifier <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length_of_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        identifier <span class=\"token operator\">+=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_letters<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> identifier</code></pre></div>\n<h2 id=\"start-your-application\"><a href=\"#start-your-application\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Start your application</h2>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">(venv)$ uvicorn routes:router --host 0.0.0.0 --port 8080</code></pre></div>\n<h2 id=\"testing\"><a href=\"#testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Testing</h2>\n<ol>\n<li>Add a new user:</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ curl -X &#39;POST&#39; \\\n  &#39;http://0.0.0.0:8080/new/&#39; \\\n  -H &#39;accept: application/json&#39; \\\n  -H &#39;Content-Type: application/json&#39; \\\n  -d &#39;{\n  &quot;username&quot;: &quot;Abdulazeez&quot;\n}&#39;</code></pre></div>\n<ol start=\"2\">\n<li>Get an SSO token</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">curl -X &#39;POST&#39; \\\n  &#39;http://0.0.0.0:8080/sso?user_id=1&#39; \\\n  -H &#39;accept: application/json&#39; \\\n  -d &#39;&#39;</code></pre></div>\n<p>The token returned is: <code class=\"language-text\">KDZfHjQAdiFl</code></p>\n<ol start=\"3\">\n<li>Sign In</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">curl -X &#39;GET&#39; \\\n  &#39;http://0.0.0.0:8080/sso/?token=KDZfHjQAdiFl&#39; \\\n  -H &#39;accept: application/json&#39;</code></pre></div>\n<p>Response:</p>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">{\n  &quot;message&quot;: &quot;User logged in successfully.&quot;\n}</code></pre></div>\n<ol start=\"4\">\n<li>Using a wrong token:</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">curl -X &#39;GET&#39; \\\n  &#39;http://0.0.0.0:8080/sso/?token=fKDZfHjQAdiFl&#39; \\\n  -H &#39;accept: application/json&#39;</code></pre></div>\n<p>Response:</p>\n<div class=\"gridsome-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">{\n  &quot;error&quot;: &quot;Invalid token passed&quot;\n}</code></pre></div>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>A proper conclusion will be written once I have completed this draft. Until then, I'll say check back frequently.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li>My brain</li>\n<li>Shortener inspiration: <a href=\"https://dev.to/lordghostx/build-and-deploy-a-serverless-url-shortener-with-python-and-fauna-3077\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/lordghostx/build-and-deploy-a-serverless-url-shortener-with-python-and-fauna-3077</a></li>\n</ul>\n","date":"4 July 2021","timeToRead":3,"image":null}},"context":{}}