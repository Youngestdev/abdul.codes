{"data":{"post":{"id":"6be5870ccb2ae742bd6621ce1638a5b8","title":"Designing a Tic-Tac-Toe game.","content":"<p>So I stumbled upon the tic-tac-toe design question on LeetCode and it dawned upon me that I have never worked on it or anything similar, hehe.</p>\n<blockquote>\n<p><em>Y'know, most beginner project involve designing a tic-tac-toe and the likes.</em></p>\n</blockquote>\n<p>I initially solved it with bruteforce: just wrote code to make it work. As a result, I missed the fact that using a <strong>set</strong> is much better since the principle of the tic-tac-toe is <em>all values on any of the vertical columns, horizontal rows or either of the diagonals is the same</em>.</p>\n<p>So following the principle, the length of the set must be 1 and whosoever's value ( \"X\" or \"O\") is the first to be in the set is the winner.</p>\n<h2 id=\"lets-go\"><a href=\"#lets-go\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Let's go!</h2>\n<p>So yeah, the board is a <code class=\"language-text\">n x n</code> board so our focus is on n rows, n columns and the two diagonals: forward and backward diagonal. The board here is going to be a 2D array:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TicTacToe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In a tic-tac-toe game, a player can only place a value on an empty box. That's the only operation allowed too, interestingly. So, the method for placing a value is pretty much straight forward:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">place</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player</code></pre></div>\n<p>When a player makes his move, if the move leads to a win, the player is returned as the winner, otherwise 0 or None.</p>\n<blockquote>\n<p><strong>player</strong> in the above code block is either \"X\" or \"O\", \"1\" or \"2\" or anything you deem fit.</p>\n</blockquote>\n<p>Now to check if there's win after a player plays:</p>\n<ul>\n<li>Check the row the player deposited his value.</li>\n<li>Check the column the player deposited his value.</li>\n<li>Check both diagonals.</li>\n</ul>\n<p>I'll create a method <code class=\"language-text\">check(row, col, player)</code> for that. I can do this inside the <code class=\"language-text\">place</code> method but extra readability, actually.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Check the current row first</span>\n        plays_in_row <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_row<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the current column</span>\n        plays_in_column <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_column<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_column<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the forward diagonal i.e [i][i], [i+1][i+1]... [i+n][i+n]</span>\n        plays_in_fwd <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_fwd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_fwd<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the backward diagonal i.e [i][~i], [i+1][~i+1]... [i+n][~i+n]</span>\n        plays_in_bwd <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_bwd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_bwd<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># If there's no win, return 0</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></code></pre></div>\n<p>Like I said earlier, I'll check for a possible win after every win. So, I'll invoke this method just after the player has made a move:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">place</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>```</code></pre></div>\n<p>The full tic-tac-toe design code is now:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TicTacToe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Check the current row first</span>\n        plays_in_row <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_row<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the current column</span>\n        plays_in_column <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_column<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_column<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the forward diagonal i.e [i][i], [i+1][i+1]... [i+n][i+n]</span>\n        plays_in_fwd <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_fwd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_fwd<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># Check the backward diagonal i.e [i][~i], [i+1][~i+1]... [i+n][~i+n]</span>\n        plays_in_bwd <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plays_in_bwd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> player <span class=\"token keyword\">in</span> plays_in_bwd<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n\n        <span class=\"token comment\"># If there's no win, return 0</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">place</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0 0 0 0 0 1</span></code></pre></div>\n<p>That simple. Yes, there are much better ways to do this I know, uhm. Credit for this goes to <a href=\"https://twitter.com/opeispo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">opeispo</a>. </p>\n<hr>\n<p>My initial solution was gibberish ( it did work but failed readability test ):</p>\n<div class=\"gridsome-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TicTacToe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Initialize your data structure here.\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        \n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Player {player} makes a move at ({row}, {col}).\n        @param row The row of the board.\n        @param col The column of the board.\n        @param player The player, can be either 1 or 2.\n        @return The current winning condition, can be either:\n                0: No one wins.\n                1: Player 1 wins.\n                2: Player 2 wins.\n        \"\"\"</span>\n        \n        <span class=\"token comment\"># Check for a win.</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player\n        \n        win <span class=\"token operator\">=</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>values <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> values <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        win2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            win2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n        \n        diag1<span class=\"token punctuation\">,</span> diag2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            diag1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            diag2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> win <span class=\"token keyword\">or</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> el <span class=\"token operator\">==</span> win2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> win2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>diag1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> el <span class=\"token operator\">==</span> diag1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> diag1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n        <span class=\"token keyword\">elif</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>diag2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> el <span class=\"token operator\">==</span> diag2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> diag2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> player\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></code></pre></div>\n<h2 id=\"moving-on\"><a href=\"#moving-on\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Moving on</h2>\n<p>Whilst on the call with Ope, I thought about cancelling a visit to a row, column or diagonal that has a piece of each player. I'll take my time to work on that next month once I'm chanced - I'm curious as to how I can make that work. I don't have an idea of how to implement it just yet.</p>\n<p>I have been doing design questions and maybe that's what I'll be doing for the next couple of weeks, it's fun. I implemented as exremely slow LRU Cache in bruteforce, fixed that with an <code class=\"language-text\">OrderedDict</code> yesterday sha. I really know I should've updated the linkedlist series, I'll fix that.</p>\n<p>I wrote a sudoku validity checker ( erhh, idk if you get, but yeah haha ). It's a simple question on codesignal but medium on LeetCode. Interestingly, I honestly didn't know how to solve it months ago but was able to solve it on Wednesday - I think I have improved in my thinking ability, maybe. But yeah, if I find something interesting to write about, I'll. See ya!</p>\n","date":"30 October 2020","timeToRead":5,"image":null}},"context":{}}